기초적인 정렬 알고리즘


1. 선택정렬

선택정렬은 가장 큰 원소를 맨 뒤로 보내거나, 가장 작은 원소를 맨 앞으로 보낸다.

그리고 정렬되지 않은 나머지 원소에 같은 일을 반복한다.


selectionSort(a[],n)
{
  for last<n downto2
  {
    A[1..last];
    a[k]<-->A[last];
  }
}

n개가 있다면 처음에는 n개를 검사하고
그 다음에는 n-1개를 검사
그 다음에는 n-2개를 검사한다

즉 시간복잡도는

n+(n-1)+(n-2).....

O(n^2)이 된다.


C언어 코드 구현

#include <stdio.h>

int main(void){
	int i, j, min, index, temp;
	int array[10] = {1, 10, 5, 8, 7 , 6, 4, 3, 2, 9};
	for(i = 0; i< 10; i++){
		min = 100;
		for(j = i; j < 10; j++){
			if( min> array[j]) {
				min = array[j];
				index = j;
			}
		}
		temp = array[i];
		array[i] = array[index];
		array[index] = temp;
	}
	
	for(i = 0; i<10; i++){
		printf("%d ", array[i]);
	}
}



2. 버블정렬


버블정렬은 바로 옆의 수와 교환을 계속해나가는 정렬이다.

왼쪽과 오른쪽의 크기를 비교해 오른쪽이 더 작으면 수를 교환한다.


bubbleSort(A[],n)
{
  for last<n down to 2
    for i <- 1 to last-1
      if(A[i]>A[i+1]) then A[i]<->A[i+1]
}


맨 뒤에 가장 큰 수가 위치하면, 그 수를 제외하고 반복해서 진행한다.

그렇기에 n개, n-1개, n-2개를 수행해 

O(n^2)의 시간복잡도를 갖는다.


C언어 코드 구현

#include <stdio.h>
 
#define COUNT 20
 
#include <stdio.h>
int main(){
    int arr[5]={10, 3, 15, 12, 1};
    int temp; //swap을 위해 선언 
    
    for(int i=0;i<5;i++){
        
        for(int j=0;j<4-i;j++){
        
            if(arr[j]>arr[j+1]){
            
                temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp; 
            }
        }
    }
    
    for(int i=0;i<5;i++)
        printf("%d ",arr[i]);
    
    
    return 0;
}



3. 삽입정렬

하나의 수를 뽑아서 비교해서 앞의 수와 비교해서, 비교한 수보다 작아지면 그 수의 +1한 인덱스에 값을 삽입한다.

앞의 정렬은 줄어나가는데 반해, 하나씩 늘려가기에 시간복잡도는

1+2+3+....n까지해서

O(n^2)이다.


insertionSort(A[],n)
{
  for i<2 ton
  {
    loc <-i-1;
    newitem<-A[i];
    while(loc>=1 and newitem<A[loc]
    {
      A[loc+1]<-A[loc];
      loc--;
    }
    A[loc+1]<-newitem;
  }
}
