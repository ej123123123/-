선택알고리즘

1) 평균 선형시간 선택 알고리즘

아무런 규칙이 없이 숫자가 나열된 배열에서 i번째 작은수를 찾는 알고리즘이다.

7번째로 작은 수를 찾는다고 할 때, 퀵정렬을 하는 사례를 알아보자.

[31 8 48 73 11 3 20 29 65 15] 의 배열이 있다.

이때 퀵정렬로 15를 피벗으로 삼으면 15는 4번째 자리에 오고, 왼쪽의 4개는 더 이상 보지 않아도 되는 구역이 된다.


평균 선형시간 선택 알고리즘의 수도코드
select(A,p,r,i) //p는 첫 번째, r은 마지막번, i번째 원소를 찾는다.
{
  if(p=r)
    return A[p]; //원소가 하나일 때
  q<-partition(A,p,r)
  k<-q-p+1;
  if(i<k)
    return select(A,p,q-1,i); //왼쪽그룹
  else if(i=k)
    return A[q]; //리턴
  else
    return select(A,q+1,r,i-k); //오른쪽 그룹
}


2. 최악의 경우 선형시간 선택 알고리즘

최악의 경우에도 세타(n)을 보장하는 방법이 있다.

1. 원소의 총 수가 5개 이하이면 원하는 원소를 찾고 알고리즘을 끝낸다.
2. 전체의 원소를 5개씩의 원소를 가진 [5/n]개의 그룹으로 나눈다.
(원소의 총수가 5의 배수가 아니면 5 이하도 가능하다.)
3. 각 그룹에서 중앙값을 찾는다.
(5개라면 3번째)
4. 각각의 중앙값을 재귀적으로 구한다.
5. M을 기준원소로 삼아 전체를 분할한다.
6. 분할된 두 그룹중 적합한 쪽을 선택해 재귀적으로 반복한다.
