07-1 큐의 ADT정의

큐는 선입선출 자료구조이다.

큐의 ADT정의
1)초기화
2)비었는지
3)삽입
4)삭제
5)제일 먼저 들어간 자료 반환

7-2) 배열기반 큐
C언어의 구조상
배열을 앞에서 빼고 뒤에서 넣으면

앞은 비고 뒤는 찬다. 그러면 데이터를 계속 앞으로 이동해야한다.

그렇기에 원형 개념을 써서 앞부분을 다시 채우는 개념으로 바꾼다.

그러나 원형을 쓰면 처음과 끝을 그분이 힘들기에 하나를 비워둔다.

#include <stdio.h>
#include <stdlib.h>
#include "CircularQueue.h"

void QueueInit(Queue * pq)
{
	pq->front = 0;
	pq->rear = 0;
}

int QIsEmpty(Queue * pq)
{
	if(pq->front == pq->rear)
		return TRUE;
	else
		return FALSE;
}

int NextPosIdx(int pos)
{
	if(pos == QUE_LEN-1)
		return 0;
	else
		return pos+1;
}

void Enqueue(Queue * pq, Data data)
{
	if(NextPosIdx(pq->rear) == pq->front)
	{
		printf("Queue Memory Error!");
		exit(-1);
	}

	pq->rear = NextPosIdx(pq->rear);
	pq->queArr[pq->rear] = data;
}

Data Dequeue(Queue * pq)
{
	if(QIsEmpty(pq))
	{
		printf("Queue Memory Error!");
		exit(-1);
	}

	pq->front = NextPosIdx(pq->front);
	return pq->queArr[pq->front];
}

Data QPeek(Queue * pq)
{
	if(QIsEmpty(pq))
	{
		printf("Queue Memory Error!");
		exit(-1);
	}

	return pq->queArr[NextPosIdx(pq->front)];
}


실제로 배열을 옮기지 않고 가리키는 포인터만 옮겨서 뒤와 앞을 표기한다.


7-3)연결리스트 기반 큐 구현

연결리스트는 

앞에서 삭제하고 뒤에서 삽입한다.

동적할당을 하기로 하기 때문에 빈 리스트가 나오지 않아 훨씬 편하다.


7-4)큐의 활용

햄버거 주문을 할 수 있다.
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "CircularQueue.h"

#define	CUS_COME_TERM	15		// 고객의 주문 간격: 초 단위

#define CHE_BUR		0		// 치즈버거 상수 
#define BUL_BUR		1		// 불고기버거 상수
#define DUB_BUR		2		// 더블버거 상수

#define CHE_TERM	12		// 치즈버거 제작 시간: 초 단위
#define BUL_TERM	15		// 불고기버거 제작 시간: 초 단위
#define DUB_TERM	24		// 더블버거 제작 시간: 초 단위

int main(void)
{
	int makeProc=0;			// 햄버거 제작 진행상황
	int cheOrder=0, bulOrder=0, dubOrder=0;
	int sec;

	Queue que;

	QueueInit(&que);
	srand(time(NULL));

	// 아래 for문의 1회 회전은 1초의 시간 흐름을 의미함
	for(sec=0; sec<3600; sec++)
	{
		if(sec % CUS_COME_TERM == 0) 
		{
			switch(rand() % 3)
			{
			case CHE_BUR:
				Enqueue(&que, CHE_TERM);
				cheOrder += 1;
				break;

			case BUL_BUR:
				Enqueue(&que, BUL_TERM);
				bulOrder += 1;
				break;

			case DUB_BUR:
				Enqueue(&que, DUB_TERM);
				dubOrder += 1;
				break;
			}
		}

		if(makeProc==0 && !QIsEmpty(&que))
			makeProc = Dequeue(&que);

		makeProc--;
	}

	printf("Simulation Report! \n", QUE_LEN);
	printf(" - Cheese burger: %d \n", cheOrder);
	printf(" - Bulgogi burger: %d \n", bulOrder);
	printf(" - Double burger: %d \n", dubOrder);
	printf(" - Waiting room size: %d \n", QUE_LEN);
	return 0;
}

07-5 덱
ADT구현

앞뒤로 넣을 수 있는 덱

1) 초기화
2) 비었는지
3) 앞 삽입
4) 앞 삭제
5) 뒷 삽입
6) 뒷 삭제
7) 앞 값 보기
8) 뒷 값 보기


양방향 연결리스트를 기반으로 구현한다.
