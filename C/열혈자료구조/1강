#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LSearch(int ar[], int len, int target) {

	int i;
	for (i = 0; i < len; i++)
	{
		if (ar[i] == target)
			return i;
	}
	return -1;
}

int main(void) {
	
	int arr[] = { 3,5,2,4,9 };
	int idx;

	idx = LSearch(arr, sizeof(arr) / sizeof(int), 4);
	if (idx == -1)
		printf("탐색 실패 \n");
	else
		printf("타겟 저장 인덱스: %d \n", idx);

	idx = LSearch(arr, sizeof(arr) / sizeof(int), 7);
	if (idx == -1)
		printf("탐색 실패 \n");
	else
		printf("타겟 저장 인덱스:%d \n", idx);
	return 0;
}


선형조사는 O(n)의 탐색시간을 갖는다.

알고리즘 분석에 있어 기본적으로 '==' 동등비교의 시간을 분석하는 것이 좋다. 왜냐하면 나머지 >,<,++ 등은 비교연산에 의존적이기 때문이다.





이진탐색

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int Bsearch(int ar[], int len, int target)
{
	int first = 0;
	int last = len - 1;
	int mid;

	while (first <= last)
	{
		mid = (first + last) / 2;

		if (target == ar[mid])
		{
			return mid;
		}
		else
		{
			if (target < ar[mid])
				last = mid - 1;
			else
				first = mid + 1;
		}
		
	}
	return -1;
}

int main(void)
{
	int arr[] = {1,3,5,7,9};
	int idx;

	idx = Bsearch(arr, sizeof(arr) / sizeof(int), 7); //7을 찾아보자
	if (idx == -1)
		printf("탐색 실패 \n");
	else
		printf("타겟 저장 인덱스:%d \n", idx);

	idx = Bsearch(arr, sizeof(arr) / sizeof(int), 4);
	if (idx == -1)
		printf("탐색 실패");
	else
		printf("타겟 저장 인덱스:%d \n", idx);
	return 0;
}


탐색을 반씩 나누어 탐색한다.

빅오는 log2(N)이다. 이는 1=N*(1/2)^k에서 나온 것으로 N을 몇 번을 나눠야 1(더 이상 나눠도 되지 않는 값)을 구하는 것이다.

시간 복잡도의 크기는

O(1)<O(logn)<O(n)<O(nlogn)<O(n^2) 순으로 이어진다


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int Bsearch(int ar[], int len, int target)
{
	int first = 0;
	int last = len - 1;
	int mid;
	int opCount = 0;

	while (first <= last)
	{
		mid = (first + last) / 2;

		if (target == ar[mid])
		{
			return mid;
		}
		else
		{
			if (target < ar[mid])
				last = mid - 1;
			else
				first = mid + 1;
		}
		opCount += 1;
		

	}
	printf("비교연산횟수:%d\n", opCount);
	return -1;
}

int main(void)
{
	int arr1[500] = {0,};
	int arr2[5000] = {0,};
	int arr3[50000] = { 0, };
	int idx;

	idx = Bsearch(arr1, sizeof(arr1) / sizeof(int), 1); //7을 찾아보자
	if (idx == -1)
		printf("탐색 실패 \n");
	else
		printf("타겟 저장 인덱스:%d \n", idx);

	idx = Bsearch(arr2, sizeof(arr2) / sizeof(int), 2);
	if (idx == -1)
		printf("탐색 실패");
	else
		printf("타겟 저장 인덱스:%d \n", idx);

	idx = Bsearch(arr3, sizeof(arr3) / sizeof(int), 3);
	if (idx == -1)
		printf("탐색 실패");
	else
		printf("타겟 저장 인덱스:%d \n", idx);


	return 0;
}


탐색결과는 arr1= 9, arr2=13, arr3=16의 결과가 나온다.

데이터 갯수가 5만개여도 16번의 연산만 하면 된다. 반면, O(n)일 경우 50000의 탐색이 될 것이다.
