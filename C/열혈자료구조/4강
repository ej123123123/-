4. 연결리스트

4-1. 연결리스트의 이해

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	int arr[10];
	int readCount = 0;
	int readData;
	int i;

	while (1)
	{
		printf("자연수 입력: ");
		scanf("%d", &readData);
		if (readData < 1)
			break;

		arr[readCount++] = readData;
	}
	for (i = 0; i < readCount; i++)
		printf("%d ", arr[i]);
}

기본의 배열은 동적할당을 할 수 없다.
몇 개의 수가 들어오는지에 따라 필요한 크기만 추가할 수 있는 것이 연결리스트이다.


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

typedef struct _node
{
	int data;
	struct _node* next;
}Node;

int main(void)
{
	Node* head = NULL;
	Node* tail = NULL;
	Node* cur = NULL;

	Node* newNode = NULL;
	int readData;

	while (1)
	{
		printf("자연수 입력: ");
		scanf("%d", &readData);
		if (readData < 1)
			break;

		newNode = (Node*)malloc(sizeof(Node));
		newNode->data = readData;
		newNode->next = NULL;

		if (head == NULL)
			head = newNode;
		else
			tail->next = newNode;
		
		tail = newNode;
			
	}
	printf("\n");

	printf("입력받은 데이터의 전체출력! \n");
	if (head == NULL)
	{
		printf("입력 받은 데이터가 존재하지 않습니다! \n");
	}
	else
	{
		cur = head;
		printf("%d ", cur->data);
		
		while (cur->next != NULL)
		{
			cur = cur->next;
			printf("%d ", cur->data);
		}
	}
	printf("\n\n");

	if (head == NULL)
	{
		return 0;
	}
	else
	{
		Node* delNode = head;
		Node* delNextNode = head->next;

		printf("%d을(를) 삭제합니다. \n", head->data);
		free(delNode);

		while (delNextNode != NULL)
		{
			delNode = delNextNode;
			delNextNode = delNextNode->next;

			printf("%d을(를) 삭제합니다. \n", delNode->data);
			free(delNode);
		}
	}
	return 0;
}

연결리스트는 동적할당을 할 수 있다. 그러나 C에서는 클라스가 없기에 

일일이 모든 선언을 typedef로 해야한다. 이건 좀 불편한듯


근데 구조체에 대해 잘모르겠다
