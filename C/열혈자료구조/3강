3장

ADT는 구체적인 기능의 완성과정은 언급하지 않고, 순수하게 기능이 무엇인지 나열한것을 가리킨다.

ADT는 삽입,삭제, 탐색 등까지 한꺼번에 정의되어야 한다.


3-2 배열을 이용한 리스트의 구현

리스트란 데이터를 나란히 저장하고, 중복을 허용하는 자료구조이다.

리스트는 두 가지 종류가 있다.
1)순차리스트 = 배열을 기반으로 구현된리스트
2)연결리스트 = 동적할당을 바탕으로 하는 리스트이다.

보통 연결리스트를 배운다.

리스트의 ADT
1)초기화
2)삽입
3)첫번째 데이터 조회
4)Next 조회
5)삭제
6)카운트



헤더함수 정의
#pragma once
#ifndef __ARRAY__LIST_H__
#define __ARRAY__LIST_H__

#define TRUE 1
#define FALSE 0


#define LIST_LEN 100
typedef int LData;

typedef struct __ArrayList
{
	LData arr{LIST_LEN};
	int numOfData;
	int curPosition;
}ArrayList;

typedef ArrayList List;

void ListInit(List* plist);
void LInsert(List* plist, Ldata data);

int LFirst(List* plist, LData* pdata);
int LNext(List* plist, LData* pdata);

LData LRemove(List* plist);
int Lcount(List* Plist);
#endif


메인함수 정의
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "ArrayList.h"

int main(void)
{
	//초기화
	List list;
	int data;
	ListInit(&list) :
	//삽입
	LInsert(&list, 11); LInsert(&list, 22);
	LInsert(&list, 33); LInsert(&list, 44);
	LInsert(&list, 55);

	printf("현재 데이터의 수:%d \n", Lcount(&list));

	if (LFirst(&list, &data))
	{
		printf("%d", data);

		while (Lnext(&list, &data))
			printf("%d", data);
	}
	printf("\n\n");

	if (LFirst(&list, &data))
	{
		if (data == 22)
			LRmove(&list);
		while (LNext(&list, &data))
		{
			if (data == 22)
				LRemove(&list);
		}
	}

	printf("현재 남은 데이터의 수:%d \n", Lcount(&list));

	if (LFirst(&list, &data))
	{
		printf("%d", data);
		while (LNext(&list, &data))
			printf("%d", data);
	}
	printf("\n\n");
	return 0;
}

