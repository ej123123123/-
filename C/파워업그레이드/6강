#19번


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#define FACT_ERROR -100;


int fact(int n)
{
	
		
	int fac = 1;
	int i;

	if (n < 1)
		return FACT_ERROR;

	for (i = 1; i <= n; i++)
		fac *= i;
	return fac;
}

int main(void)
{
	int n, result;

	fputs("숫자입력(1이상): ", stdout);
	scanf("%d", &n);

	result = fact(n);
	if(result ==-100)
		puts("입력이 잘못됐습니다.");
	else
		printf("%d! = %d \n", n, result);
	return 0;
}





#20번

#include <stdio.h>
#include <string.h>

#define DIVIDE_BY_ZERO	-256;


int Divint(int, int, int*);

int main(void)
{
	int dd, ds;
	int result[2];

	while (1)
	{
		puts("나눗셈을 위한 두 정수 입력 : ", stdout);
		scanf("%d %d", &dd, &ds);

		if (Divint(dd, ds, result) == DIVIDE_BY_ZERO)
		{
			printf("0으로 나누는 오류 발생: 숫자 재 입력 \n\n");
			continue;
		}
		else
		{
			printf("몫 : %d, 나머지: %d \n", result[0], result[1]);
			break;
		}
	}
	return 0;
}
int Divint(int divid, int divisor, int* resultArr)
{
	if (divisor == 0)
		return DIVIDE_BY_ZERO;
	resultArr[0] = divid / divisor;
	resultArr[1] = divid & divisor;
	return 1;
}




21-1

#include <stdio.h>
#include <string.h>

int plussum(int* arr,int arrLen)
{
	int sum = 0;
	for (int i = 0; i < arrLen; i++)
	{
		sum += arr[i];
	}
	return sum;
}

int main(void)
{
	int a, b;
	int arr1[3] = { 5,10,15 };
	int arr2[5] = { 1,2,3,4,5 };


	a = plussum(arr1, sizeof(arr1) / sizeof(int));
	b = plussum(arr2, sizeof(arr2) / sizeof(int));

	printf("%d %d", a, b);
	return 0;
}


sizeof는 인트형
strlen은 문자열

*함수에서는 배열의 길이정보를 제공하는 방법이 존재하지 않는다.

int SumofArray(int(*arrPtr)[2], int column)
{
	int total = 0;
	int i, j;

	for (i = 0; i < column; i++)
		for (j = 0; j < 2; j++)
			total += arrPtr[i][j];
	return total;
}

int main(void)
{
	int arr3[2][2] = { 1,3,5,7 };
	int arr4[2][3] = { 1,2,3,4,5,6 };

	int a, b;
	a=SumofArray(arr3, 2);
	b=SumofArray(arr4, 2);

	printf("%d %d", a, b);
}



22

#include <stdio.h>
#include <string.h>

int moonja(char arr[], char search)
{
	int sum = 0;
	for (int i = 0; i < strlen(arr); i++)
	{
		if (arr[i] == search)
			sum++;
	}
	return sum;
}

int main(void)
{
	int num;
	char arr[100];
	char a;
	printf("대상 문자열 입력: ");
	gets(arr);
	printf("새어 볼 문자 입력: ");
	scanf("%c", &a);

	num = moonja(arr, a);
	printf("%d", num);
	return 0;
}


23

int strLen(char* str)
{
	int len = 0;

	while ((*str) != 0)
	{
		len++;
		str++;

	}
	return len;
}

int strCpy(char* dest, char* source)
{
	int len = strlen(source);
	int i;

	for (i = 0; i < len, i++)
		dest[i] = source[i];
	return len;
}

int strCat(char* dest, char* source)
{
	int destLen = strLen(dest);
	int srcLen = strLen(source) + 1;
	int i;

	for (i == 0; i < strLen; i++)
		dest[destLen + i] = source[i];

	return destLen + srcLen;
		
}

int strCmp(char* str1, char* str2)
{
	while ((*str1) != 0 || (*str2) != 0)
	{
		if (*str1 > *str2)
			return 1;
		else if (*str1 < *str2)
			return -1;
		else
		{
			str1++;
			str2++;
			continue;
		}
	}
	return 0;
}

24
