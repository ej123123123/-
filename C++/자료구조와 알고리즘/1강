1.1알고리즘 개요

알고리즘이란?
주어진 문제를 해결하기 위한 잘 정의된 동작들의 유한집합

자료구조란?
알고리즘의 객체
구조화되고 조직화된 자료를 저장 추출 관리 방법


알고리즘의 선택방법
1)하나의 문제엔 여러가지 문제가 존재
2)속도와 자원은 트레이드 오프 관계
3)절대적인 최상의 알고리즘은 없다.
4)속도가 빠른 게 무조건 좋은 건 아님. Simple is the best


1-2 알고리즘 분석
알고리즘 분석을 하는 이유
->어떤 알고리즘을 쓸지 결정을 해야함.

경험적분석
->코드보고함

수학적분석
->계산식

최악경우분석을 많이함.
빅오표기법


1-3)유클리드 알고리즘

최대공약수를 구하는 알고리즘으로 관련 법칙이 있다

1)GCD(u,v)=GCD(u-v,v) if u>v
2) GCD(u,v)=GCD(v,u)
3)GCD(u,0)=u

최대공약수의 특징상, 계속 뺄샘을 해가면 마지막에 0과 계산이 되는 수가 최대 공약수다.

코드구현

유클리드 최대공약수 알고리즘

#include <stdio.h>

int get_gcd(int u, int v)
{
	int t;
	while (u > 0)
	{
		if (u < v)
		{
			t = u;
			u = v;
			v = t;
		}
		u = u - v;
		
	}
	return v;
}

void main(void)
{
	int u, v;
	int gcd;
	u = 280;
	v = 30;
	printf("get_gcd result: ");
	gcd = get_gcd(u, v);
	printf("%d\n", gcd);
		
}


개선된 유클리드 알고리즘


뺄셈은 숫자가 많다. 나눗셈을 하면 연산횟수가 줄어든다.


int gcd_modulus(int u, int v)
{
	int t;
	while (v > 0)
	{
		t = u % v;
		u = v;
		v = t;
	}
	return u;
}
int gcd_recursion(int u, int v)
{
	if (v == 0)
	{
		return u;
	}
	else
	{
		return gcd_recursion(v, u % v);
	}
}



소수판별

#include <stdio.h>
#include<math.h>

int is_prime(int n)
{
	int i;
	for (i = 2; i < n; i++)
	{
		if (n % i == 0) {
			return false;
		}
	}
	return true;
}

int is_prime2(int n)
{
	int i, sqrn;
	sqrn = int(sqrt(n));
	for (i = 2; i <= sqrn; i++)
	{
		if (n % i == 0)
			return false;

	}
	return true;
}

소수를 하나씩 검사하면서 나누어지는 수가 있는지 찾는다.

첫번째는 O(n)의 시간이 걸린다.

그러나 전부 다 조사할 필요는 없다. 결국에 12가 있다면

1*12, 2,6 3,4 4,3 6,2 12,1 등 이렇게 돌아오기에 중복되는 수가 발생하고 반만 하면 된다.

정확히 반은 n의 제곱근이다 sqrt(n)*sqrt(n)이기 때문이다.

이럴 경우 시간복잡도 O(n^1/2)가 걸리게 된다.
