01 트랜잭션

1) 트랜잭션의 개념

하나의 작업을 수행하는 데 필요한 데이터베이스의 연산들을 모아놓은 것으로, 데이터베이스에서 논리적인 작업의 단위가 된다.

트랜잭션은 데이터베이스에 장애가 발생했을 때 데이터를 복구하는 작업의 단위도 된다.



돈을 송금하는 경우가 있다면, 인출과 입금의 2개의 트랜잭션이 생긴다.



트렌잭션은 모든 명령문이 완벽하게 처리되거나 하나도 처리되지 않아야 데이터베이스가 모순이 없는 일관된 상태를 유지할 수 있다.



2)트랜잭션의 특성

ACID

원자성,일관성,격리성,지속성



2.1)원자성



트랜잭션의 원자성은 all-or-nothing 방식으로 실행되거나 실행되지 않아야한다. 일부만 실행되서는 안된다.

실행하다가 말면 원래대로 되돌려야한다.



2.2)일관성

트랜잭션이 성공한 이후에도 일관된 상태를 유지해야 함을 의미한다.



계좌잔액이 만원이 있는데, 5천원을 이체하면 둘이 합쳐 만원이 되어야 한다.



2.3) 격리성

트랜잭션이 완료될 때까지 중간 연산 결과에 다른트랜잭션이 접근할 수 없도록 한다.



2.4) 지속성

트랜잭션이 성공한 이후에도 데이터가 손실되지 않고 영구적이어야 한다.



2.5) 트랜잭션의 특성을 지원하는 DMBS의 기능

원자성<- 회복기능

일관성<- 병행제어 기능

격리성<-병행제어기능

지속성<- 회복기능



3)트랜잭션의 연산

commit연산

트랜잭션이 성공적으로 수행되었음을 선언

rollback 연산

트랜잭션을 수행하는 데 실패했음을 선언



4)트랜잭션의 상태




활동 상태

트랜잭션이 수행중인 상태



부분완료 상태

트랜잭션의 마지막 연산이 실행된 직후의 상태



완료 상태

성공 후 commit 연산



실패 상태

장애가 발생하여 실패



철회

실패하여 Rollback한 상태





02 장애와 회복

1)장애의 유형

장애: 시스템이 제대로 동작하지 않는 상태



트랜잭션 장애

의미: 트랜잭션 수행 중 오류가 발생하여 정상적으로 수행을 계속할 수 없는 상태

원인 트랜잭션의 논리적 오류, 잘못된 데이터 입력, 시스템 자원의 과다 사용 요구, 처리 대상 데이터의 부재 등



시스템 장애

의미: 하드웨어의 결함으로 정상적으로 수행을 계속할 수 없는 상태

원인: 하드웨어 이상으로 메인 메모리에 저장된 정보가 손실되거나 교착 상태가 발생한 경우 등



미디어 장애

의미: 디스크 자치의 결함으로 디스크에 저장된 데이터베이스의 일부 혹은 전체가 손상된 상태

원인: 디스크 헤드의 손상이나 고장



2)데이터베이스의 저장 연산

휘발성 저장 장치

메인메모리



비휘발성 저장장치

디스크, 자기테이프



안정 저장장치

비휘발성 저장장치를 이용해 데이터 복사본 여러 개를 만드는 방법



input(x)

디스크블록에 저장되어 있는 데이터 X를 메인 메모리 버퍼 블록으로 이동시키는 연산



output(x)

메인 메모리 버퍼 블록에 있는 데이터 x를 디스크 블록으로 이동시키는 연산



read(x)

메인 메모리 버퍼 블록에 저장되어 있는 데이터를 x를 프로그램의 변수로 읽어오는 연산



write(x)

프로그램의 변수 값을 메인 메모리 버퍼 블록에 있는 데이터x에 기록하는 연산





3)회복 기법

장애가 발생하기 전의 모순이 없고 일관된 상태로 복구시키는 것.



3.1) 회복을 위한 연산

덤프(dump) :데이터베이스 전체를 다른 저장 장치에 주기적으로 복사하는 방법

로그(log) 데이터베이스에 변경 연산이 실행될 때마다 데이터를 변경하기 이전 값과 변경한 이후의 값을 별도의 파일에 기록하는 방법



redo(재실행):가장 최근에 저장한 데이터베이스 복사본을 가져온 후 로그를 이용해 복사본이 만들어진 이후에 실행된 모든 변경 연산을 재실행하여 장애가 발생하기 직전의 데이터베이스 상태로 복구

undo(취소): 로그를 이용해 지금까지 실행된 모든 변경 연산을 취소하여 데이터베이스를 원래의 상태로 복구



3.2) 로그 회복 기법



즉시 갱신 회복 기법

트랜잭션 수행 중에 데이터를 변경한 연산의 결과를 즉시 반영



지연 갱신 회복

트랜잭션이 수행되는 동안에는 데이터 변경 연산의 결과를 데이터베이스에 즉시 반영하지 않고, 로그 파일에만 기록해두었다가, 트랜잭션이 완료된 후에 로그를 기록된 내용을 이용해 데이터베이스에 한 번에 반영한다.



3.3) 검사 시점 회복 기법

로그 회복기법과 같은 방법으로 로그 기록을 이용하되 일정 시간 간격으로 검사 시점을 만들어둔다. 그리고 장애가 발생하면 최근 검사 시점 이전의 트랜잭션에는 회복 작업을 수행하지 않고, 이후의 트랜잭션에만 회복작업을 수행한다.



3.4) 미디어 회복 기법

일정 주기마다 다른 안전한 저장장치해두는 덤프를 이용한다. 디스크 장애가 발생하면 가장 최근에 복사해둔 덤프를 이용해 장애 발생 이전의 일관된 데이터베이스 상태로 복구한다.





03 병행 제어

1)병행 수행과 병행 제어

병행수행:트렌잭션이 동시에 수행

병행제어:문제가 발생하지 않게 잘 실행



2)병행 수행의 문제

2.1 갱신 분실

하나의 트랜잭션이 수행한 데이터 변경 연산의 결과를 다른



2.2) 모순성

하나의 트렌잭션이 여러개의 데이터 변경 연산을 실행할 때 일관성 없는 상태의 데이터베이스에서 데이터를 가져와 연산을 실행함으로써 모순된 결과가 발생하는 것이다.



2.3) 연쇄복귀

장애가 발생한 트랜잭션이 rollback 연산을 실행하기 전에, 변경한 데이터를 가져가 사용한 다른 트랜잭션이 수행을 완료해버리면 rollback 연산을 실행할 수 없어 문제가 발생하게 된다.



3)트랜잭션 스케줄

3.1)직렬스케줄

인터리빙 방식을 이용하지 않고 각 트랜잭션별로 연산들을 순차적으로 실행시키는 것



하나의 트렌잭션이 완료후 다른 트랜잭션 실행



3.2) 비직렬 스케줄

인터리빙 방식을 이용하여 트랜잭션을 수행시키는 것이다.

하나의 트랜잭션이 종료되기 전에 다른 트랜잭션이 실행될 수 있다.



정확한 결과를 보여주지 못할 수 있다.



3.3) 직렬 가능 스케줄

직렬 스케줄에 따라 수행한 것과 같이 정확한 결과를 생성하는 비직렬 스케줄이다.



4) 병행 제어 기법

여러 트랜잭션을 병행 수행하면서도 정확한 결과를 얻을 수 있는 직렬 가능성을 보장받기 위해 사용한다.

모든 트랜잭션이 따르면 직렬 가능성이 보장되는 나름의 규약을 저의하고 트랜잭션들이 이 규약을 따르도록 하는 것이다.



4.1) 로킹 기법의 개념



데이터가 접근하지 못하도록 lock과 unlock을 동시에 사용한다.

한 트랜잭션ㄴ이 먼저 접근한 데이터에 대한 연산을 마칠 때까지 상호배제하여 직렬 가능성을 보장받는다.



공용lock

트랜잭션이 데이터에 대해 공용lock연산을 실행하면 해당 데이터에 read 연산을 실행할 수 있지만 write 연산을 수행할 수 없다. 그리고 해당 데이터 에 대한 다른 트랜잭션도 공용 lock 연산을 동시에 실행할 수 있다.



전용lock

트랜잭션이 데이터에 전용 lock 연산을 실행하면 해당 데이터에 read 연산과 wite 연산을 모두 실행할 수 있다. 그러나 해당 데이터에 대한 다른 트랜잭션은 공용이든 전용이든 어떤 lock 연산을 실행할 수 없다.



4.2) 2단계 로킹 규약

트랜잭션 스케줄의 모든 트랜잭션이 2단계 로킹 규약을 준수하면 해당 스케줄은 직렬 가능성이 보장된다.

확장 단계: 트랜잭션이 lock 연산만 실행할 수 있고, unlock 연산은 실행할 수 없는 단계

축소 단계: 트랜잭션이 unlock 연산만 실행할 수 있고, lock 연산은 실행할 수 없는 단계



-> 교착 상태가 발행할 수 있어 해결이 필요.

