2.1 Principles of Network Applications


애플리케이션끼리 통신을 해야 한다.

그러나 각각 통신하는 종류는 다르고, 애플리케이션 종류도 엄청 많다.



2.1.1 Network Application Architectures
어플리케이션 아키텍쳐는 개발자의 입장에서 다양한 앤드 시스템에서 돌아가기 위해 필요한 구조이다.



구조의 종류는 여러가지가 있다.

클라이언트-서버 아키텍쳐

->서버가 클라이언트에 연결

P2P 아키텍쳐

-> 각자 피어가 서버 역할을 한다.



2.1.2 Processes Comunicating
프로세스= 프로그램이 실제로 동작하는 것



프로세스와 프로세스는 통신할 필요가 있다.



클라이언트 프로세스: 소통을 시작한다.

서버 프로세스: 소통을 기다린다.



Socket

소켓은 문과 같다. 소켓은 운영체제 안에 있는 네트워크 기능을 사용할 수 있게 한다.



Addressing Processes

메일이나 기타 패킷을 전송하려면 주소가 필요하다.

그 주소가 IP주소이며 이것을 통해 목적지를 안다.



애플리케이션 프로토콜

1)메시지 타입

2) 메시지 문법

3) 메시지 내용의 의미

4) 규칙(언제 어떻게 프로세스를 처리하는지에 대한 내용)



2.1.3 Transport Services Available to Applcantions
소킷(socket)은 트렌스포트 레이어와 애플리케이션 프로세스 사이에 인터페이스다.

트랜스포트 레이어는 4가지 수준에서 그 차이가 있다.



1)Data Integrity

데이터가 도중에 바뀌면 안 된다



2) Timing

적정한 시간



3) Throughput

처리량을 잘처리



4) Security

보안이 중요하다.





2.1.4 Transport services Provided by the Internet
인터넷 환경에서는 두 가지 프로토콜이 있다.



TCP service

신뢰성 있는 전송, 결점 통제, 혼잡 통제, 연결 중심

데이터 전송 중의 결점이나 손실등을 방지하지만, 이것을 다 하기에, 시간이나 최소 통제량, 보안등은 제공해주지 못 한다.



UDP service

위의 서비스를 제공해주지 않는다. 근데 TCP에서 제공해주는 것이 필요없는 아무것도 제공이 필요없는 어플에서는 이것을 사용한다.





2.2 The Web and HTTP
2.2.1 Overview of HTTP
HyperText Transfer Protocol(HTTP)

웹의 애플리케이션 레이어 프로토콜이다. 



웹페이지는 객체들로 구성되어 있는데, 객체들은 이미지, 자바, HTML파일 등 여러가지가 있다.



HTML은 어떻게 웹 클라이언트가 웹 페이지를 웹 서버로부터 요청하는지를 정하고 어떻게 서버가 웹페이지를 클라이언트에게 전달하는지를 정한다.



2.2.2 Non-Persistent and Persistent Connections
Non-persistent

:한 번에 하나의 객체만 보낼 수 있음. 여러 개의 객체를 받으려면 여러번 연결

한 번 객체를 보내고 연결을 끊음



Persistent

여러 개의 객체를 보낼 수 있음.

한번 객체를 보내고 좀 기다림





2.2.3 HTTP Message Format
GET /somedir/page.html HTTP/1.1
Host: www.someschool.edu
Connection: close
User-agent: Mozilla/5.0
Accept-language: fr



HTTP 구조를 보자.

1) request line

URL field

HTTP version field

method field

3가지 구성



서버에 요청할 때 get을 쓴다.

POST 개시하는 메소드



이어지는 라인은 header line이라 부른다.






200: 데이터 요구 성공

301: Moved Permanetly: 요청된 객체가 옮겨짐. 새로운 URL이 Location에 생긴다.

400: 요구가 에러

404 Not found: 요구한 문서가 없음

505 HTTP version not supported: 지금 버전 안통함





2.2.4 User-Server Interaction:Cookies
쿠키:특정 사이트에 접속할 때 부여되는 숫자와 문자로된 작은 파일이다. 



쿠키는 아이디나 마찬가지이며, 이것을 통해 널 알아봐주겠다. 특정 서비스를 제공하겠다.





쿠키의 4가지 요소

1) 헤더라인은 HHTP 응답 메시지를 갖는다.

2) 쿠키 헤더라인은 다음 방문에 메시지를 요청한다.

3) 유저의 쿠키파일은 브라우저에 의해 관리됨

4) 저장된다.





2.2.5 Web caching
웹 캐시는 프록시 서버라고도 불리는데, 기존의 서버를 대신해서 HTTP의 요청을 만족시켜준다.



서버와 클라이언트 중간에 있는 프록시가 이 요구를 만족시켜주겠다.






중간에 캐시가 있어서 서버와 클라이언트 역할을 해준다.



The conditional Get

그러나 프록시가 저장하고 있는 정보가 낡은 거일수도 있는데, 서버에게 프록시가 확인을 해서 안 바꼈으면 그대로 주고, 바꼈다면 원본을 다시 받아온다.





2.4 DNS-The Internet's Directory Service
숫자로 된 아이피 주소를 기억하기 쉽지 않기 떄문에, 글자로 된 이름을 부여한 것이 DNS이다. 네이버나 야후 등 그 사이트의 주소를 말한다.



2.4.1. Services Provided by DNS
DNS는 이름을 바꿔주는 거 외에 몇 가지 특징을  갖고 있다.



Host aliasing: 가명을 쓸 수 있게 해준다. 다른 이름으로 간단한 이름으로 접속 가능

Mail server aliasing: 메일 주소도 메일에 맞게 바꿔준다.

Load distribution: 각각 주소마다 트래픽량이 달라서 이것을 조절해준다.



2.4.2 Overview of How DNS works
DNS 서버는 DNS에 대한 맵핑정보를 갖고 있다.

하지만 DNS서버가 너무 뭉쳐있으면 안 좋다.

1) 하나가 망가지면 다 망가짐

2) 큰 트래픽

3) 먼 곳에 느리다

4) 유지가 힘들다.



그렇기에 분산된 DNS서버를 유지해야 한다.






DNS서버는 계층적으로 구성된다.



DNS caching

캐시 시스템을 이용해서 속도 향상을 할 수 있다.





2.4.3 DNS Records and Messages
DNS는 resource records(RRs)를 저장한다. 홈네임과-IP 주소의 매칭을 저장한다. 

튜플로 저장되는데

(Name, Value, Type, TTL)로 저장된다.



TTL은 이 리소스들이 남아있는 시간을 의미한다.



DNS message


식별, 깃발 등 여러가지 값을 갖고 있다.
