3.1 Introdcution and Transport-Layer services


다른 호스트들 사이에서 가동되는 애플리케이션 프로세스의 논리적인 통신



물리적으로 간 것이 아니라, 보낸 것이 갔는지 안 갔는지만 확인한다.



Sender:메시지를 패킷으로 나눠서 네트워크 레이어로 넘김

Reciever: 분할되서 온 패킷들을 다시 뭉침



3.1.1 Relationship Between Transport and Network Layers
애플리케이션의 내용이 무엇이든 트렌스포트 레이어는 보내는 것에만 집중한다.



3.1.2 Overview of the Transport Layer in the Internet
UDP: 신뢰X, 간단한 프로토콜

No-frills extension of best-effort IP

TCP: 신뢰O, 복잡한 프로토콜

Congestion control 데이터 꼬이는 것 통제

Connection setup 연결 잘되게 함

Flow control 결점 컨트롤



->딜레이 통제, 대역폭 보장





3.2 Multiplexing and Demultiplexing
Socket:운영체제 안에 구현되어 있는 네트워크 프로그래밍을 쓰게 한다.



Multiplexing: 여러 곳에 있는 것을 하나로 모음

Demultiplexing: 한 곳에 있는 곳을 여러개로 나눠줌



어떻게 어느 컴퓨터로 보내는지가 중요하다. 각각 데이터그램은 IP 주소를 갖고 있다.




소스의 패킷에 소스의 포트, 데스티네이션 포트 등이 있어서 찾아갈 수 있다.



소스포트가 필요한 이유?

1) 누구로부터 온 정보인지 알아야한다

2) 양방향 소통





3.4 Principles of Reliable Data transfrer
Reliable data transfer

redt_send(): 신뢰롭게 데이터를 넘겨달라고 요구함

udt_send(): 신뢰롭진 않지만 보내줘

deliver_data(): 데이터 받은 후 보내는것

rdt_rcv():데이터 받았다






reliable data transfer protocol이 서비스의 추상화를 책임지며, 신뢰성있는 전달을 담당한다.





3.4.1 Building a Reliable Data Transfer Protocol
FSM(finite-state-machine)모델. 

보내면 결과가 있음



Reliable Data transfer over a Channel with Bit Errors

에러가 없으면 트렌스포트 레이어는 할 일이 없다.

그러나 실제로는 신호가 바뀐다. 그렇기에 에러비트를 같이 보낸다.



checksum이라는 에러분류 코드를 보내는데, 이 합이 변경됐다면 다시 정보를 보내라고 요청을 한다.

ACK가 정보를 잘 받았을 때 보내는 코드다.

만약 ACK가 일정시간 오지 않는다면 정보를 정확히 보내는데 실패했다고 볼 수 있다.

그러면 이 때 타이머를 두고 재전송을 한다.





3.4.2 Pipelined Reliable Data Transfer Protocols



신호를 보내고 다시 ack를 받을 때 까지 기다리면 그 동안 sender가 노는 시간이 너무 길다.

이 시간을 어떻게 처리해야 할까?



->한번에 연속해서 보내고 연속해서받는다



윈도우 크기가 6이면, 0,1,2만 처음에 3개를 보낸다.

0에 대해 ack을 받으면 1,2,3만 신경 쓰고, 1에 대해 받으면 2,3,4를 받는다.



3.4.3 Go-back-N(GBN)


culmulative ACK



1,2,3  // 5, 7

을 받았다면, 3을 받았다고 응답한다.



연속적으로 된 것만 응답한다.





Selective repeat

각각의 ack을 보낸다.







3.5 Connection-Oriented Transport:TCP


UDP:User Datagram Protocol

:기본적인 역할만 함, 전달만 함. 재전송X, 신뢰성 보장X, 검사X



UDP를 사용하는 이유

배보다 배꼽이 클 수 있다.

간단하고, TCP의 기능이 필요하지 않을 때 쓴다.



1) 주기적으로 정보교환

2) 자동적 정보교환

3) 실시간





3.5.1 The TCP connection
TCP는 상대가 준비되어 있는지 확인하고 데이터를 보내는 방식이다. UDP는 그냥 보내서 더 빠르다



특징

1)Full duplex data

양방향 데이터 전송

MSS:maximum segment size

2) Conncection-oriented

Handshaking: 데이터 보내기 전에 메시지 보내고 확인을 받음

3) Flow controoled

받는 게 보내는 거 보다 많으면 안 됨

4) Point to point

1 보내는 사람, 1 받는 사람

5) Reliable, in-order byte stsem

메시지의 경계선이 없다.

안녕하세요. 잘 지내요? 라는 메시지가 있으면

안녕하세요// 잘 지내요? 라고 자르지 않는다. 그냥 임의로 안녕하//세요 이런 식으로 짜를 수도 있다.



6) Pipelined

 윈도우 사이즈에 따라 보낸다.





3.5.2 TCP Segment Structure





시작지점

도착지점

시퀀스넘버: 여러개로 쪼개서 보내기에 몇번째 데이터인지를 적음

acknowlegement number:상대로 받기 기대하는 다음 바이트, Cumulative ACK





3.5.3 Round-Trip Time Estimation and Timeout
RTT타임을 설정한느 것이 중요하다.

너무 RTT타임이 짧으면, 데이터가 잘 갔지만 재전송을 할 수 있다.

RTT가 너무 길면, 재전송이 안되서 데이터에 정체가 생긴다





RTT를 어떻게 추론할까?

여태까지의 ACK의 기록을 확인해 측정한다.





Exponetial weighted moving average

(1-가중치) * 예상RTT + 가중치 * 실제RTT의 공식으로 구한다





sender의 이벤트

애플리케이션으로부터 데이터 받기

타임아웃

Ack 받기



3.5.5 Flow control
리시버가 수용할 수 있는만큼 데이터를 보내는 것



샌더는 리시버에게 메시지를 보내고, 리시버는 수용력이 충분히 있는지를 알려준다.

충분히 있지 않다면 샌더는 패킷을 보내지 않는데, 일정 시간 이후에도 리시버로부터 메시지가 오지 않으면 샌더는 한 번더 메시지를 보낸다.



TCP



3.6 Principles of Congestion Control
Congestion: 너무 많은 데이터를 네트워크에 보내서 핸들링 안되는 것



이 congestion의 통제가 필요하다.



통제가 안된다면 패킷을 잃어버리거나 오랜 지체가 걸릴 수 있다.



TCP는 메시지를 보내기 전에 용량이 있는지를 확인하고 3번 확인을 하는 시스템을 한다.

3.6.1 The Causes and the costs of congestion
첫번째 가정

2명의 보내는 사람과 2명의 받는 사람

하나의 라우터, 버퍼는 무한

수용능력은 R, 노 transmission



지연시간은 무한대로 길어진다.





두번째 가정

하나의 라우터, 유한한 버퍼

샌더는 꽉차면 재전송을 해야한다.





이상적인 상황:

1) 버퍼가 여유로울 때만 데이터를 보낸다.

그러나 네트워크 레이어랑 트렌스포트 레이어는 원칙적으로 소통이 안되기에 그냥 이상적이다.



2)버려지는 것을 알 수 있다.

버려지는 것을 알면 다시 패킷을 보낸다. 그러나 그것을 알 수 없다.



현실:

중간에 데이터가 버려지는 것은 물론 발생하고, 버려지지 않았을 때도

프리스페이스가 있지만, 큐가 너무 길어 트랜스포트 타이머가 도착하지 못했다고 생각해 패킷을 재전송하는 현상이 일어난다.



세번째 가정

4개의 sender가 있고, 라우터가 여러개 있고, 재전송과 타임아웃이 있다.

이 경우 라우터를 여러개 통과하기 때문에, 마지막 라우터를 통과하지 못해 데이터를 잃어버릴 수도 있다.



3.6.2 Approaches to Congestion control
End-to-end congestion control

1) 네트워크로 피드백X

2) 딜레이나, 앤드시스템에 손실이 있으면 혼잡을 추론

3) TCP에 의해 접근





Network-assited congestion control

1) 라우터가 엔드시스템에 피드백을 준다

2) 1개의 비트가 congestion을 나타남

3) 레이트에 맞춰서 샌드가 전송





3.7 TCP Congestion Control



혼잡이 발생하면 인풋이 더이상 전달이 안되는 상황이 있다.


additive-incrase,  multiplicative-decrease(AIMD)

그 전달이 너무 정체되는 시기가 오기 전에 윈도우 크기를 조절한다.

한번에 줄였다가 천천히 올린다.



TCP slow Start

천천히 적게 보내다가, 갈수록 보내는 양을 늘려서 보내는 양을 정한다.



congestion avoidance

8개를 보내고, 8개마다 1개의 윈도우를 증가시킨다.



패킷이 손실되면 윈도우 사이즈를 줄인다. 그리고 다시 천천히 늘린다.







